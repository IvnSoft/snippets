#!/usr/bin/perl

=head1 NAME

garmin-auto-import - Import Garmin data when connected

=head1 DESCRIPTION

This script is supposed to be started when you log in to Gnome. It will poll
the USB device each second to see if a Garmin device got connected. Once
connected, it will automatically import the files to a local folder.

=head1 SYNOPSIS

    garmin-auto-import;
    garmin-auto-import \
      --vendor 091e \
      --product 0003 \
      --output-dir /home/USERNAME/Documents/garmin \
      ;

=head1 REQUIREMENTS

Running the script should inform you of your missing dependencies.

=over 4

=item garmin-sync

This script should exist in your PATH. garmin-sync can be downloaded from
L<https://launchpad.net/garmin-sync>. Example installation:

    $ cd /usr/local/bin;
    $ sudo tar xfv ~/Downloads/garmin-sync-0.3.tar.gz;

=item Perl modules

This script require L<Device::USB>, L<Getop::Long::Descriptive> and
L<IPC::Run3>. All modules are part of the ubuntu/debian package system
and can be installed with:

    $ sudo apt-get install \
        getopt-long-descriptive \
        libdevice-usb-perl \
        libipc-run3-perl \
        ;

=item Zenity

Zenity is already installed, if you're running Ubuntu. If not, you can install
it with the command below:

   $ sudo apt-get install zenity;

=item Nautilus

Nautilus is the default file manager in Ubuntu. This dependency is optional,
and not required to import the files.

   $ sudo apt-get install nautilus;

=back

=cut

use strict;
use warnings;
use constant DEBUG => $ENV{'GARMIN_DEBUG'} ? 1 : 0;
use LWP::UserAgent;

sub error;
sub question;
sub notify;
sub logmsg;

my $garmin_sync_app = require_exe_or_die('garmin-sync');
my $zenity_app = require_exe_or_die('zenity');
my $nautilus_app = require_exe_or_die('nautilus');
my $config_file = $ENV{'HOME'} .'/.garmin-auto-import';

require_or_die('Device::USB');
require_or_die('Getopt::Long::Descriptive');
require_or_die('IPC::Run3');

my($opt, $usage) = Getopt::Long::Descriptive::describe_options(
                       'garmin-auto-import <some-arg>',
                       [],
                       [ 'vendor=s', 'The vendor USB ID', { default => '091e' } ],
                       [ 'product=s', 'The product USB ID', { default => '0003' } ],
                       [ 'output-dir=s', 'Output directory for .tcx files', { default => join '/', $ENV{'HOME'}, 'Documents', 'garmin' } ],
                       [],
                       [ 'help', 'print usage message and exit' ],
                   );

my $usb = Device::USB->new;
my @usb_id = map { hex $_ } @$opt{qw/ vendor product /};
my $connected = 0;

if($opt->help) {
    sdie('%s', $usage->text);
}
elsif(grep { $_ eq 'upload' } @ARGV) {
    exit upload(grep { -e $_ } @ARGV) ? 0 : 1;
}

unless(-d $opt->output_dir) {
    mkdir $opt->output_dir or sdie('Failed to create %s: %s', $opt->output_dir, $!);
}

while(1) {
    if(!$usb->find_device(@usb_id)) {
        $connected = 0;
    }
    elsif(!$connected) {
        $connected = time;
        chdir $opt->output_dir or sdie('Failed to change directory to %s: %s', $opt->output_dir, $!);
        symlink '.', 'exports' or logmsg "Failed to create symlink ./exports: $!";

        logmsg 'Device detected...' if DEBUG;
        logmsg 'Output dir=%s', $opt->output_dir if DEBUG;

        if(question "You have connected a Garmin device.\n\nDo you want to import data?") {
            if(system $garmin_sync_app) {
                error "Could not import data from Garmin device!";
            }
            else {
                sync_success();
            }
        }

        unlink 'exports' or logmsg "Failed to remove symlink ./exports: $!";
    }
    sleep 1;
}

exit 0; # should never come to this...

sub upload {
    my @files = @_ ? @_ : _find_tcx_files();
    my $garmin_signin_url = 'https://connect.garmin.com/signin';
    my $garmin_upload_url = 'http://connect.garmin.com/proxy/upload-service-1.1/json/upload/.tcx';
    my $n_uploaded = 0;
    my $form = {};
    my($ua, $config, $res, $username, $password);

    unless(@files) {
        notify 1200, 'No new files to upload';
        return 1;
    }
    unless(eval 'require Mojo::UserAgent; 1') {
        error 'Cannot upload without Mojolicious installed';
        return;
    }

    if(-r $config_file) {
        $config = do $config_file,
    }
    else {
        error 'Cannot upload without %s', $config_file;
        return;
    }

    logmsg 'Trying to log in...' if DEBUG;

    $ua = Mojo::UserAgent->new(max_redirects => 5);
    $res = $ua->get($garmin_signin_url)->res; # get session id

    $res->dom->find('#login input[name]')->each(sub {
        my($name, $value) = @{ $_[0] }{qw/ name value /};
        $form->{$name} = $config->{$name} || $value || '';
        #logmsg '%s=%s', $name, $form->{$name} if DEBUG; # Do not want to display password
    });

    $res = $ua->post_form($garmin_signin_url, $form)->res;

    if(my $e = eval { $res->dom->at('.messages') }) {
        logmsg '%s: %s', $garmin_signin_url, $e->all_text if DEBUG;
        error 'Could not log in %s', $e->all_text;
        return;
    }

    notify 1200, 'Logged in to connect.garmin.com. Starting to upload files...';

    for my $file (@files) {
        $res = $ua->post_form($garmin_upload_url, {
                    data => { file => $file },
                    responseContentType => 'text/html',
                })->res;

        logmsg '%s => %s: %s', $file, $garmin_upload_url, $res->message if DEBUG;

        if($res->code != 200) {
            notify 'Could not upload %s: %s', $file, $res->message;
            next;
        }

        $n_uploaded++;
    }

    notify 1200, 'Uploaded %s files to connect.garmin.com', $n_uploaded;

    return 1;
}

sub _find_tcx_files {
    my $ts = $connected || time;
    my @files;

    opendir my $DH, $opt->output_dir or die $!;

    for my $name (readdir $DH) {
        my $file = join '/', $opt->output_dir, $name;;

        $name =~ /\.tcx$/ or next;
        (stat $file)[9] <= $ts and next;
        push @files, $file;
    }

    return @files;
}

sub sync_success {
    my @zenity = (
                    'zenity',
                    '--list',
                    '--hide-header',
                    '--multiple',
                    '--column=Selection',
                    "--separator=\n",
                    "--text=Garmin import was successful!\n\nPlease select actions from the list below:",
                 );

    my %options = (
        'Open https://connect.garmin.com/dashboard' => 'gnome-open https://connect.garmin.com/dashboard',
        'Open ' .$opt->output_dir, 'nautilus ' .$opt->output_dir,
        'Upload imported files', => \&upload,
    );

    IPC::Run3::run3(\@zenity,
        \join("\n", keys %options), # stdin
        \my @selections,            # stdout
        \undef,                     # stderr
    );

    use POSIX 'setsid';

    unless(fork) { # child
        for(map { chomp; $_ } @selections) {
            my $action = $options{$_};
            logmsg $action if DEBUG;
            if(ref $action eq 'CODE') {
                $action->();
            }
            else { # complete Dissociation
                setsid;
                fork or exec $action;
            }
        }
        exit;
    }

    wait;
}

sub question {
    my $format = shift;
    system(zenity => '--question', sprintf "--text=$format", @_) ? 0 : 1;
}

sub logmsg {
    warn sprintf shift(@_) ."\n", @_;
}

sub error {
    my $format = shift;
    system(zenity => '--error' => sprintf "--text=$format", @_) ? 0 : 1
}

sub notify {
    my $timeout = shift;
    my $format = shift;
    system 'notify-send',
        -t => $timeout,
        -i => 'notification-network-wireless-full',
        sprintf($format, @_),
        ;
}

sub sdie {
    die sprintf shift(@_) ."\n", @_;
}

sub require_exe_or_die {
    my $exe = shift;
    return $exe if(grep { -x "$_/$exe" } split /:/, $ENV{'PATH'});
    die <<"MISSING";
    Required binaries:

    * garmin-sync
      Can be downloaded from://launchpad.net/garmin-sync 

    * nautilus
    \$ sudo apt-get install nautilus

    * zenity
    \$ sudo apt-get install zenity

    =================================================================
    Required binary missing: $exe
    =================================================================

MISSING
}

sub require_or_die {
    my $module = shift;
    return $module if(eval "require $module; 1");
    die <<"MISSING";

    Running ubuntu/debian? Install the module using the command below:

    \$ sudo apt-get install \
        getopt-long-descriptive \
        libdevice-usb-perl \
        libipc-run3-perl \
        ;

    =================================================================
    Require module missing: $module
    =================================================================

MISSING
}

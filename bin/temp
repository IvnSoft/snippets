#!/usr/bin/perl
use strict;
use warnings;
use feature qw(say state);
use experimental 'signatures';
use File::Temp 'tempfile';
use IO::Socket::INET;
use Time::Piece;

my (%argv, %temp) = (max => 10000, print_headers => 1);
while (@ARGV) {
  my $opt = shift @ARGV;
  $argv{csv} = 1 if $opt eq '--csv';
  $argv{max} = shift @ARGV if $opt eq '--max' and @ARGV;
  $argv{out} = shift @ARGV if $opt eq '--out' or $opt eq '-o';
}

$argv{csv} = 1 if $argv{out};
$argv{len} = 0;

if ($argv{out} and -s $argv{out} and open my $FILE, '<', $argv{out}) {
  my @lines = <$FILE>;
  $argv{fields} = shift @lines if @lines;
  $argv{print_headers} = 0;
  my ($TMP, $tmp) = tempfile;
  shift @lines while @lines >= $argv{max};
  print {$TMP} $argv{fields}, @lines;
  close $TMP or die "close $tmp: $!\n";
  rename $tmp, $argv{out} or die "mv $tmp $argv{out}: $!\n";
}

if ($argv{fields}) {
  $argv{fields} = [grep { $_ =~ /\w/ } map { /(\w+)/ && $1 } split /,/, $argv{fields}];
}

my $OUT = \*STDOUT;
open $OUT, '>>', $argv{out} or die "Write $argv{out}: $!\n" if $argv{out};

read_sensors();
read_hddtemp();
$argv{fields} ||= [sort keys %temp];
$argv{csv} ? print_summary_csv() : print_summary_human();

sub name($str) {
  my $l = length $str;
  $argv{len} = $l if $l > $argv{len};
  return lc $str;
}

sub print_summary_csv {
  say {$OUT} join ',', 'time', sort keys %temp if delete $argv{print_headers};
  say {$OUT} join ',', localtime->datetime, map { $temp{$_} || 0 } @{$argv{fields}};
}

sub print_summary_human {
  for my $k (sort { $temp{$b} <=> $temp{$a} } keys %temp) {
    printf "%-$argv{len}s = %sC\n", $k, $temp{$k};
  }
}

sub read_hddtemp {
  my $HDDTEMP = IO::Socket::INET->new(PeerAddr => 'localhost:7634') or die "hddtemp: $!";
  my $hddtemp = '';
  while (1) {
    $HDDTEMP->recv(my $buf, 1024);
    $hddtemp .= $buf || last;
  }

  my ($p, $name) = (0, '');
  for my $part (split /\|/, $hddtemp) {
    $name = $part =~ m!/dev/(\w+)! ? $1 : $name if ($p % 5) == 1;
    $temp{name($name)} = $part if ($p % 5) == 3;
    $p++;
  }
}

sub read_sensors {
  open my $SENSORS, '-|', 'sensors' or die "sensors: $!";
  while (<$SENSORS>) {
    my ($name, $temp) = /^(.+):\s+\+(\d+)[^a-zA-Z]*C\b/ or next;
    next if $name =~ m!package!i;
    $name =~ s!\s+!!g;
    $temp{name($name)} = $temp;
  }
}

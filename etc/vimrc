source $VIMRUNTIME/menu.vim
set wildmenu
set cpo-=<
set wcm=<C-Z>
map <F10> :emenu <C-Z>

map <F5> !perl -c<CR>

" basic settings
set autoindent
set backspace=indent,eol,start " more powerful backspacing
" set clipboard=unnamed
set complete=.,w,b,u,t " skip grepping :S
set encoding=utf-8
set expandtab
set history=50 " keep 50 lines of command line history
set nobackup " Don't keep a backup file
set nowrap
set ruler " show the cursor position all the time
set shiftround
set shiftwidth=4
set showcmd
set softtabstop=4
set tabstop=8

" me like tabs
map ,e :tabedit <C-R>=expand("%:h")<CR>
map <C-n> :tabnext<CR>

" spelling
map ,se :setlocal spell spelllang=en_us<CR>:syntax off<CR>
map ,sn :setlocal spell spelllang=no<CR>:syntax off<CR>
map ,so :setlocal spell spelllang=<CR>:syntax on<CR>
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline
map <F6> z= " check spelling

" pasting
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O><F2>
set pastetoggle=<F2>

" gnome-terminal/something puts weird characters into my files
map ,f :%s/\%xa0/ /g<CR>

filetype plugin on " autoload plugins from $VIM/ftplugin/[filetype]/*
syntax on

" make vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif 

" autocomplete with tab/shift+tab
function! SuperCleverTab(direction)
    if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
        return a:direction == 1 ? "\<Tab>" : "\<S-Tab>"
    else
        if pumvisible()
            return a:direction == 1 ? "\<C-N>" : "\<C-P>"
        elseif &omnifunc != ''
            return "\<C-X>\<C-O>"
        elseif &dictionary != ''
            return "\<C-K>"
        else
            return a:direction == 1 ? "\<C-N>" : "\<C-P>"
        endif
    endif
endfunction

inoremap <Tab> <C-R>=SuperCleverTab(1)<CR>
inoremap <S-Tab> <C-R>=SuperCleverTab(-1)<CR>

" left sidebar with overview of class/functions++
" let s:Tlist_Ctags_Cmd = "/usr/bin/ctags"
let s:Tlist_WinWidth = 30
map <F4> :TlistToggle<cr>
map ,pp :call InsertPackageFromFile()<CR>a

" &omnifunc autocompletion (requires filetype plugin on)
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType perl set omnifunc=""
autocmd Bufenter *.* :call LoadTemplate()
autocmd Bufenter *.tt :set filetype=html

function! InsertPackageFromFile()
    let a:name = ModuleName()
    if a:name == 'Unknown::Module'
        echo "Could not find package name from filename"
    else
        execute "normal i" . a:name
    endif
endfunction

function! ModuleName()
    let a:file = expand("%:p")
    if a:file =~ 'lib/.*\.pm'
        let a:location = split(a:file, "lib/")
        let a:name = len(a:location) == 2 ? a:location[1] : a:location[0]
        let a:name = substitute(a:name, '/', '::', 'g')
        let a:name = substitute(a:name, '.pm', '', '')
        return a:name
    else
        return "Unknown::Module"
    endif
endfunction 

function! LoadTemplate()
    if line("$") != 1
        return | " more than one line in buffer
    endif

    let a:ext = expand("%:e") | " get extension

    if a:ext == "html"
        read $HOME/Templates/index.html
        normal ggdd
    elseif a:ext == "css"
        read $HOME/Templates/stylesheet.css
        normal ggdd
    elseif a:ext == "pm"
        return LoadPerlTemplate()
    elseif a:ext == "t"
        read $HOME/Templates/perl.t
        normal ggdd
    elseif a:ext == "pl"
        read $HOME/Templates/script.pl
        normal ggdd
    endif
endfunction

function! LoadPerlTemplate()
    let a:filename = expand("%:p") | " get filename
    let a:name = ModuleName()

    if a:filename =~ 'Schema.pm$'
        read $HOME/Templates/Schema.pm
    elseif a:filename =~ '/Result/'
        let a:table = substitute( expand("%:t"), '\(.*\)', '\L\1', '' )
        let a:table = substitute( a:table, "\." . expand("%:e"), '', '' )
        read $HOME/Templates/Result.pm
        execute ":%s/my_table/" . a:table . "s/g"
    elseif a:filename =~ '/ResultSet/'
        let a:table = substitute( expand("%:t"), '\(.*\)', '\L\1', '' )
        let a:table = substitute( a:table, "\." . expand("%:e"), '', '' )
        read $HOME/Templates/ResultSet.pm
        execute ":%s/my_table/" . a:table . "s/g"
    elseif a:filename =~ '/Controller/'
        read $HOME/Templates/Controller.pm
    else
        read $HOME/Templates/Module.pm
    endif

    execute ":%s/My::Module/" . a:name . "/g"

    normal ggdd
endfunction

" mta config files
" autocmd BufReadCmd *.mta :r !docsis -d <afile> 2>/dev/null
" autocmd BufReadCmd *.mta :1
" autocmd BufWriteCmd *.mta :w! .%.docsis
" autocmd BufWriteCmd *.mta !docsis -e .%.docsis % &>/dev/null
" 
" modem config files
" autocmd BufReadCmd *.cfg :r !docsis -d <afile> 2>/dev/null
" autocmd BufReadCmd *.cfg :1
" autocmd BufWriteCmd *.cfg :w! .%.docsis
" autocmd BufWriteCmd *.cfg !docsis -e .%.docsis % &>/dev/null
